@page
@model Signalr.Hmg.Tests.E2es.DefaultSignalrWebservice.Pages.IndexModel
@{
}

<html>
    <head>
        <title>SignalR interactive page</title>
    <!-- CSS only -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">  
    </head>
    <body>

        <div id="app" class="container">
            <h1>
                Signalr interactive page
                <small>
                    <button type="button" class="btn btn-primary">connect</button>
                </small>
            </h1>
            <section>
                <div v-if="hubs == null">
                    loading...
                </div>
                <div class="row" v-else>
                    <div class="col-4">
                        <div class="accordion">
                            <div v-for="hub in hubs" class="accordion-item">
                                <h2 class="accordion-header" id="panelsStayOpen-{{hub.Name}}">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-{{hub.Name}}" aria-expanded="true" aria-controls="panelsStayOpen-{{hub.Name}}">
                                        {{ hub.Name }}
                                    </button>
                                </h2>
                                <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingOne">
                                    <div class="accordion-body">

                                        <h5>Methods</h5>

                                        <div class="d-grid gap-2">
                                            <button v-for="method in hub.methods" type="button" class="btn btn-success" @@click="selectHubMethod(hub.Name, method.Name)">
                                                {{ method.Name }}
                                            </button>
                                        </div>

                                        <hr />

                                        <h5>Events</h5>

                                        <ul class="list-group">
                                            <li v-for="event in hub.events" class="list-group-item d-flex justify-content-between align-items-center">

                                                <input class="form-check-input me-1" type="checkbox" v-model="event.IsShow" @@click="enableEvents(event)">

                                                {{ event.Name }}

                                                <span class="badge bg-warning rounded-pill">{{ event.NewMessageCount }}</span>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-8">
                        <div class="card text-center">
                            <div class="card-header">
                                <ul class="nav nav-tabs card-header-tabs">
                                    <li class="nav-item">
                                        <a class="nav-link" aria-current="true" href="#">Active</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link active" href="#">Link</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link">Disabled</a>
                                    </li>
                                </ul>
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">Special title treatment</h5>
                                <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
                                <a href="#" class="btn btn-primary">Go somewhere</a>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            
        </div>

        <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
        <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
        <!-- JavaScript Bundle with Popper -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>

        <script src="~/js/signalr/dist/browser/signalr.js"></script>
        <script type="text/javascript">

            const { createApp } = Vue

            const parseHubs = (response) => {
                
                let hubsNames = {};

                response.Methods.forEach(item => {
                    if(hubsNames[item.HubName] == undefined) {
                        hubsNames[item.HubName] = {
                            methods: [],
                            events: []
                        };
                    }

                    hubsNames[item.HubName].methods.push(item);

                });

                response.Events.forEach(item => {
                    if (hubsNames[item.HubName] == undefined) {
                        hubsNames[item.HubName] = {
                            methods: [],
                            events: []
                        };
                    }

                    hubsNames[item.HubName].events.push(item);
                });

                let result = [];

                for(let x in hubsNames)
                {
                    result.push({
                        Name: x,
                        IsShow: true,
                        NewMessageCount: 0,
                        methods: hubsNames[x].methods,
                        events: hubsNames[x].events.map(event => {
                            event.IsShow = true;
                            event.NewMessageCount = 0;
                            return event;
                        })
                    });
                }

                return result;
            };
            


            createApp({
                data() {
                    return {
                        data: null,
                        hubs: null
                    }
                },
                methods: {
                    selectHubMethod(methodName, hubName) {
                        alert(`selectHubMenthod ${methodName} ${hubName}`);
                    },
                    enableEvents(eventItem) {
                        eventItem.IsShow = !eventItem.IsShow;
                    }
                },
                mounted() {
                    axios
                        .get('/signalr-export.json')
                        .then(response => {
                            console.info('response.data', response.data);
                            this.data = response.data

                            var hubs = parseHubs(response.data);
                            console.info('hubs', hubs);
                            this.hubs = hubs;
                        })
                }
            }).mount('#app')

        </script>
    </body>
</html>